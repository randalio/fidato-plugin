{"version":3,"file":"js/main.js","mappings":"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CJ,CAAC,CAAC;UACN;QAEJ;;QAKA;QACA;QACA;;QAEA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;;QAEA;;QAGA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;;QAGA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;;QAMA;;QAIA;MACJ,CAAC,CAAC;IACN;EAAC;AAAA;AAGL,IAAIhD,cAAc,CAAC,CAAC,C;;;;;;;;;;ACx5BpB","sources":["webpack://fidato-wealth/webpack/bootstrap","webpack://fidato-wealth/webpack/runtime/make namespace object","webpack://fidato-wealth/./src/js/main.js","webpack://fidato-wealth/./src/scss/main.scss"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Add your JavaScript code here\nclass FidatoPluginJS {\n\n    constructor() {\n        this.init();\n    }\n\n    init() {\n        // wait until DOM is ready\n        document.addEventListener(\"DOMContentLoaded\", function(event){\n            console.log(\"DOM loaded\");\n\n            // add animation to all dividers\n            const dividers = document.querySelectorAll('.elementor-widget-divider');\n            for (let i = 0; i < dividers.length; i++) {\n                // Access each element using elements[i]\n                dividers[i].setAttribute('data-scroll', '');\n                dividers[i].setAttribute('data-scroll-repeat', '');\n                dividers[i].setAttribute('data-scroll-class', 'loco-in-view');\n            }\n\n            // get every element with an ID\n            const elements = document.querySelectorAll('[id]');\n            for (let i = 0; i < elements.length; i++) {\n                // Access each element using elements[i]\n                elements[i].setAttribute('data-scroll', '');\n                elements[i].setAttribute('data-scroll-id', elements[i].id);\n            }\n\n\n\n            // Initialize scroll as null\n            let scroll = null;\n            let scrollTop = 0;\n\n            // Function to initialize Locomotive Scroll\n            function initScroll() {\n            // Only initialize if not already initialized\n            if (scroll === null) {\n                scroll = new LocomotiveScroll({\n                el: document.querySelector('[data-scroll-container]'),\n                smooth: true,\n                multiplier: 1,\n                class: 'loco-in-view',\n                lerp: 0.05,\n                scrollingClass: 'has-scroll-scrolling',\n                draggingClass: 'has-scroll-dragging'\n                });\n                \n                // Track scroll position\n                scroll.on('scroll', (obj) => {\n                scrollTop = obj.scroll.y;\n                });\n                \n                return scroll;\n            }\n            return scroll;\n            }\n\n            // Set up hash links\n            function setupHashLinks() {\n            document.querySelectorAll('a[href^=\"#\"]').forEach(link => {\n                const targetId = link.getAttribute('href').substring(1);\n                if (targetId) {\n                link.setAttribute('data-scroll-to', targetId);\n                link.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    const target = document.querySelector(`[data-scroll-id=\"${targetId}\"]`);\n                    if (target && scroll) {\n                    const headerHeight = document.querySelector('header')?.offsetHeight || 0;\n                    scroll.scrollTo(target, {\n                        offset: -headerHeight,\n                        callback: () => scroll.update()\n                    });\n                    }\n                });\n                }\n            });\n            }\n\n            // Function to scroll to hash (but only when explicitly called)\n            function scrollToHash(hash) {\n                if (!hash || !scroll) return false;\n                \n                const target = document.querySelector(`[data-scroll-id=\"${hash}\"]`);\n                if (target) {\n                    const headerHeight = (document.querySelector('header')?.offsetHeight + 100) || 0;\n                    scroll.scrollTo(target, {\n                        offset: -headerHeight,\n                        duration: 800,\n                        callback: () => scroll.update()\n                    });\n                    return true;\n                }\n                return false;\n            }\n\n            // Fix for top cutoff\n            function fixTopCutoff() {\n            if (scroll && scroll.scroll && scroll.scroll.instance.scroll.y < 0) {\n                scroll.scrollTo(0, { duration: 100, disableLerp: true });\n            }\n            }\n\n            // Wait until DOM is fully loaded before initializing anything\n            document.addEventListener('DOMContentLoaded', () => {\n            // Initialize scroll first\n            initScroll();\n            \n            // Then set up the hash links\n            setupHashLinks();\n            \n            // Update the scroll instance\n            if (scroll) scroll.update();\n            });\n\n            // Handle scrolling to hash ONLY when user explicitly requests it\n            // Add this flag to check if it's the initial load\n            let isInitialLoad = true;\n\n            window.addEventListener('load', () => {\n            // Update scroll on complete page load\n            if (scroll) scroll.update();\n            \n            // Get hash from URL\n            const hash = window.location.hash.substring(1);\n            \n            // IMPORTANT: Only scroll to hash if this isn't the initial page load\n            // or if you specifically want to allow initial hash scrolling (remove the condition)\n            if (!isInitialLoad && hash) {\n                // Delay slightly to let everything settle\n                setTimeout(() => {\n                scrollToHash(hash);\n                }, 200);\n            }\n            \n            isInitialLoad = false;\n            });\n\n            // Apply fix every 2 seconds instead of every second (less resource intensive)\n            setInterval(fixTopCutoff, 2000);\n\n            // Handle resize events\n            window.addEventListener('resize', () => {\n            clearTimeout(window.resizedFinished);\n            window.resizedFinished = setTimeout(() => {\n                if (scroll) {\n                scroll.update();\n                fixTopCutoff();\n                }\n            }, 250);\n            });\n\n\n\n\n            // Initialize the Swiper with proper configuration to avoid scroll conflicts\n            var overflowSwiper = new Swiper('.overflowSwiper', {\n                slidesPerView: 1.33,\n                centeredSlides: true,\n                loop: false,\n                speed: 500,\n                spaceBetween: 36,\n                mousewheel: false,\n                keyboard: {\n                    enabled: true,\n                    onlyInViewport: true,\n                },\n                navigation: {\n                    nextEl: '.overflow-swiper-button-next',\n                    prevEl: '.overflow-swiper-button-prev',\n                },\n                breakpoints: {\n                    768: {\n                        centeredSlides: false,\n                        slidesPerView: 2,\n                    },\n                    1024: {\n                        centeredSlides: false,\n                        slidesPerView: 3,\n                    }\n                },\n                // on: {\n                //     // Important: Update Locomotive Scroll after swiper events\n                //     slideChangeTransitionEnd: function() {\n                //         if (scroll) {\n                //             // Force Locomotive Scroll to update\n                //             scroll.update();\n                //         }\n                //     },\n                //     touchEnd: function() {\n                //         if (scroll) {\n                //             // Make sure Locomotive Scroll is updated after touch interactions\n                //             setTimeout(() => {\n                //                 scroll.update();\n                //             }, 100);\n                //         }\n                //     }\n                // }\n            });\n\n            var blueNumericSwiper = new Swiper('.blueNumericSwiper', {\n                slidesPerView: 1.33,\n                centeredSlides: true,\n                loop: false,\n                speed: 500,\n                spaceBetween: 16,\n                mousewheel: false,\n                keyboard: {\n                    enabled: true,\n                    onlyInViewport: true,\n                },\n                navigation: {\n                    nextEl: '.blue-numeric-swiper-button-next',\n                    prevEl: '.blue-numeric-swiper-button-prev',\n                },\n                breakpoints: {\n                    768: {\n                        slidesPerView: 2,\n                        centeredSlides: false,\n                        spaceBetween: 36,\n                    },\n                    1024: {\n                        slidesPerView: 3,\n                        centeredSlides: false,\n                        spaceBetween: 36,\n                    }\n                },\n                // on: {\n                //     // Important: Update Locomotive Scroll after swiper events\n                //     slideChangeTransitionEnd: function() {\n                //         if (scroll) {\n                //             // Force Locomotive Scroll to update\n                //             scroll.update();\n                //         }\n                //     },\n                //     touchEnd: function() {\n                //         if (scroll) {\n                //             // Make sure Locomotive Scroll is updated after touch interactions\n                //             setTimeout(() => {\n                //                 scroll.update();\n                //             }, 100);\n                //         }\n                //     }\n                // }\n            });\n\n            var blueValuesSwiper = new Swiper('.blueValuesSwiper', {\n                slidesPerView: 1.33,\n                centeredSlides: true,\n                loop: false,\n                speed: 500,\n                spaceBetween: 16,\n                mousewheel: false,\n                keyboard: {\n                    enabled: true,\n                    onlyInViewport: true,\n                },\n                navigation: {\n                    nextEl: '.blue-values-swiper-button-next',\n                    prevEl: '.blue-values-swiper-button-prev',\n                },\n                breakpoints: {\n                    768: {\n                        slidesPerView: 2,\n                        centeredSlides: false,\n                        spaceBetween: 36,\n                    },\n                    1024: {\n                        slidesPerView: 3,\n                        centeredSlides: false,\n                        spaceBetween: 36,\n                    }\n                },\n            });\n\n            var learningCenterSwiper = new Swiper('.learningCenterSwiper', {\n                slidesPerView: 1,\n                centeredSlides: false,\n                loop: false,\n                speed: 500,\n                spaceBetween: 36,\n                mousewheel: false,\n                keyboard: {\n                    enabled: true,\n                    onlyInViewport: true,\n                },\n                navigation: {\n                    nextEl: '.learning-center-swiper-button-next',\n                    prevEl: '.learning-center-swiper-button-prev',\n                },\n\n            });\n\n\n            if( document.querySelectorAll('.team-carousel').length ){\n\n                // Initialize the Swiper with proper configuration to avoid jump on loop\n                var teamSwiper = new Swiper('.teamSwiper', {\n                    slidesPerView: 1.5,\n                    loop: true,\n                    speed: 750, // Match your CSS transition speed\n                    centeredSlides: true,\n                    spaceBetween: 32,\n                    mousewheel: false,\n                    keyboard: {\n                    enabled: true,\n                    onlyInViewport: true,\n                    },\n                    navigation: {\n                    nextEl: '.team-swiper-button-next',\n                    prevEl: '.team-swiper-button-prev',\n                    },\n                    breakpoints: {\n                    768: {\n                        slidesPerView: 2,\n                        spaceBetween: 44,\n                        centeredSlides: true,\n                    },\n                    1024: {\n                        slidesPerView: 3,\n                        spaceBetween: 100,\n                        centeredSlides: false,\n                    }\n                    },\n                    // These are the key fixes for smooth looping\n                    loopAdditionalSlides: 5, // Add more cloned slides\n                    loopedSlides: 5,         // Number of looped slides\n                    // This is critical for smooth animation\n                    allowTouchMove: false,   // Disable touch movement to prevent jump issues\n                    on: {\n                    // Important: Update Locomotive Scroll after swiper events\n                    slideChangeTransitionEnd: function() {\n                        if (scroll) {\n                        // Force Locomotive Scroll to update\n                        scroll.update();\n                        }\n                    },\n                    touchEnd: function() {\n                        if (scroll) {\n                        // Make sure Locomotive Scroll is updated after touch interactions\n                        setTimeout(() => {\n                            scroll.update();\n                        }, 100);\n                        }\n                    }\n                    }\n                });\n                \n                // If you need touch movement, add this to handle navigation via buttons only:\n                document.querySelector('.team-swiper-button-next').addEventListener('click', () => {\n                    teamSwiper.slideNext();\n                });\n                document.querySelector('.team-swiper-button-prev').addEventListener('click', () => {\n                    teamSwiper.slidePrev();\n                });\n\n                // Select all link elements within swiper-slide elements that are inside team-carousel\n                document.querySelectorAll('.team-carousel .swiper-slide .link').forEach(link => {\n                    // Add click event listener to each link\n                    link.addEventListener('click', function(e) {\n                        e.preventDefault();\n                        \n                        const linkHref = this.getAttribute('href').toString();\n                        document.querySelector(linkHref).classList.add('active');\n                        console.log(linkHref);\n                        const teamPanelOverlay = document.querySelector('.panel-container');\n\n                        if (scroll) {\n                            scroll.stop();\n                        }\n\n                        teamPanelOverlay.classList.add('active');\n                        teamPanelOverlay.style.top = scrollTop + 'px';\n                    });\n                });\n\n                // Make sure all close/overlay click handlers properly restart Locomotive Scroll\n                document.querySelector('.team-panel--header .close').addEventListener('click', function() {\n                    const teamPanelOverlay = document.querySelector('.panel-container');\n\n                    teamPanelOverlay.classList.remove('active');\n                    document.querySelectorAll('.team-panel--content').forEach(panel => {\n                        panel.classList.remove('active');\n                    });\n\n                    if (scroll) {\n                        scroll.start();\n                        \n                        // Force update after starting\n                        setTimeout(() => {\n                            scroll.update();\n                        }, 100);\n                    }\n                });\n\n                document.querySelector('.team-panel--overlay').addEventListener('click', function() {\n                    console.log('overlay clicked');\n                    const teamPanelOverlay = document.querySelector('.panel-container');\n\n                    teamPanelOverlay.classList.remove('active');\n                    document.querySelectorAll('.team-panel--content').forEach(panel => {\n                        panel.classList.remove('active');\n                    });\n                    \n                    if (scroll) {\n                        scroll.start();\n                        \n                        // Force update after starting\n                        setTimeout(() => {\n                            scroll.update();\n                        }, 100);\n                    }\n                });\n\n                // Add event listeners to handle resize events\n                window.addEventListener('resize', function() {\n                    if (scroll) {\n                        // Force Locomotive Scroll update on window resize\n                        setTimeout(() => {\n                            scroll.update();\n                        }, 100);\n                    }\n                });\n\n                // Ensure Locomotive Scroll continues to work when interacting with the Swiper\n                const teamCarousel = document.querySelector('.team-carousel');\n                if (teamCarousel) {\n                    // When mouse enters the carousel, make sure scroll isn't stopped\n                    teamCarousel.addEventListener('mouseenter', function() {\n                        if (scroll && !document.querySelector('.panel-container.active')) {\n                            scroll.update();\n                        }\n                    });\n                    \n                    // When mouse leaves the carousel, make sure scroll is working\n                    teamCarousel.addEventListener('mouseleave', function() {\n                        if (scroll && !document.querySelector('.panel-container.active')) {\n                            scroll.update();\n                        }\n                    });\n                }\n\n            }\n\n\n\n\n            // //wait until images, links, fonts, stylesheets, and js is loaded\n            // window.addEventListener(\"load\", function(e){    \n            //     console.log(\"window loaded\");\n                \n            //     let scroll = null;\n\n            //     // Initialize Locomotive Scroll\n            //     scroll = new LocomotiveScroll({\n            //       el: document.querySelector('[data-scroll-container]'),\n            //       smooth: true,\n            //       multiplier: 1,\n            //       class: 'loco-in-view',\n            //       lerp: 0.05,\n            //     });\n                \n            //     // Keep a reference to scrollTop outside of the event handlers\n            //     let scrollTop = 0;\n            //     scroll.on('scroll', (obj) => {\n            //       // Current vertical scroll position\n            //       scrollTop = obj.scroll.y;\n            //     });\n                \n            //     // Function to handle anchor link clicks\n            //     function handleAnchorLinkClick() {\n            //       // Select all anchor links on the page\n            //       const anchorLinks = document.querySelectorAll('a[href^=\"#\"]');\n                  \n            //       // Add click event listener to each anchor link\n            //       anchorLinks.forEach(link => {\n            //         link.addEventListener('click', function(e) {\n            //           // Prevent default anchor link behavior\n            //           e.preventDefault();\n                      \n            //           // Get the target element id from the href attribute\n            //           const targetId = this.getAttribute('href');\n                      \n            //           // Skip if it's just \"#\" (to avoid scrolling to top)\n            //           if (targetId === '#') return;\n                      \n            //           // Get the target element\n            //           const targetElement = document.querySelector(targetId);\n                      \n            //           // If target element exists, scroll to it\n            //           if (targetElement) {\n            //             // You can add offset here if needed (e.g., for fixed headers)\n            //             const offset = 0;\n                        \n            //             // Use Locomotive Scroll's scrollTo method\n            //             scroll.scrollTo(targetElement, {\n            //               offset: offset,\n            //               duration: 1000, // Duration in ms (adjust as needed)\n            //               easing: [0.25, 0.00, 0.35, 1.00], // Cubic bezier curve (adjust as needed)\n            //               disableLerp: false, // Set to true for instant scrolling\n            //             });\n            //           }\n            //         });\n            //       });\n            //     }\n                \n            //     // Initialize the anchor link handling after DOM is ready\n            //     document.addEventListener('DOMContentLoaded', function() {\n            //       handleAnchorLinkClick();\n                  \n            //       // Update Locomotive Scroll when the page is fully loaded\n            //       window.addEventListener('load', () => {\n            //         scroll.update();\n            //       });\n            //     });\n                \n            //     // Update Locomotive Scroll on window resize\n            //     window.addEventListener('resize', () => {\n            //       scroll.update();\n            //     });\n\n            //     // Initialize the Swiper with proper configuration to avoid scroll conflicts\n\n\n            //     // Initialize the Swiper with proper configuration to avoid scroll conflicts\n            //     var overflowSwiper = new Swiper('.overflowSwiper', {\n            //         slidesPerView: 1.33,\n            //         centeredSlides: true,\n            //         loop: false,\n            //         speed: 500,\n            //         spaceBetween: 36,\n            //         mousewheel: false,\n            //         keyboard: {\n            //             enabled: true,\n            //             onlyInViewport: true,\n            //         },\n            //         navigation: {\n            //             nextEl: '.overflow-swiper-button-next',\n            //             prevEl: '.overflow-swiper-button-prev',\n            //         },\n            //         breakpoints: {\n            //             768: {\n            //                 centeredSlides: false,\n            //                 slidesPerView: 2,\n            //             },\n            //             1024: {\n            //                 centeredSlides: false,\n            //                 slidesPerView: 3,\n            //             }\n            //         },\n            //         // on: {\n            //         //     // Important: Update Locomotive Scroll after swiper events\n            //         //     slideChangeTransitionEnd: function() {\n            //         //         if (scroll) {\n            //         //             // Force Locomotive Scroll to update\n            //         //             scroll.update();\n            //         //         }\n            //         //     },\n            //         //     touchEnd: function() {\n            //         //         if (scroll) {\n            //         //             // Make sure Locomotive Scroll is updated after touch interactions\n            //         //             setTimeout(() => {\n            //         //                 scroll.update();\n            //         //             }, 100);\n            //         //         }\n            //         //     }\n            //         // }\n            //     });\n\n            //     var blueNumericSwiper = new Swiper('.blueNumericSwiper', {\n            //         slidesPerView: 1.33,\n            //         centeredSlides: true,\n            //         loop: false,\n            //         speed: 500,\n            //         spaceBetween: 16,\n            //         mousewheel: false,\n            //         keyboard: {\n            //             enabled: true,\n            //             onlyInViewport: true,\n            //         },\n            //         navigation: {\n            //             nextEl: '.blue-numeric-swiper-button-next',\n            //             prevEl: '.blue-numeric-swiper-button-prev',\n            //         },\n            //         breakpoints: {\n            //             768: {\n            //                 slidesPerView: 2,\n            //                 centeredSlides: false,\n            //                 spaceBetween: 36,\n            //             },\n            //             1024: {\n            //                 slidesPerView: 3,\n            //                 centeredSlides: false,\n            //                 spaceBetween: 36,\n            //             }\n            //         },\n            //         // on: {\n            //         //     // Important: Update Locomotive Scroll after swiper events\n            //         //     slideChangeTransitionEnd: function() {\n            //         //         if (scroll) {\n            //         //             // Force Locomotive Scroll to update\n            //         //             scroll.update();\n            //         //         }\n            //         //     },\n            //         //     touchEnd: function() {\n            //         //         if (scroll) {\n            //         //             // Make sure Locomotive Scroll is updated after touch interactions\n            //         //             setTimeout(() => {\n            //         //                 scroll.update();\n            //         //             }, 100);\n            //         //         }\n            //         //     }\n            //         // }\n            //     });\n\n            //     var blueValuesSwiper = new Swiper('.blueValuesSwiper', {\n            //         slidesPerView: 1.33,\n            //         centeredSlides: true,\n            //         loop: false,\n            //         speed: 500,\n            //         spaceBetween: 16,\n            //         mousewheel: false,\n            //         keyboard: {\n            //             enabled: true,\n            //             onlyInViewport: true,\n            //         },\n            //         navigation: {\n            //             nextEl: '.blue-values-swiper-button-next',\n            //             prevEl: '.blue-values-swiper-button-prev',\n            //         },\n            //         breakpoints: {\n            //             768: {\n            //                 slidesPerView: 2,\n            //                 centeredSlides: false,\n            //                 spaceBetween: 36,\n            //             },\n            //             1024: {\n            //                 slidesPerView: 3,\n            //                 centeredSlides: false,\n            //                 spaceBetween: 36,\n            //             }\n            //         },\n            //     });\n\n            //     var learningCenterSwiper = new Swiper('.learningCenterSwiper', {\n            //         slidesPerView: 1,\n            //         centeredSlides: false,\n            //         loop: false,\n            //         speed: 500,\n            //         spaceBetween: 36,\n            //         mousewheel: false,\n            //         keyboard: {\n            //             enabled: true,\n            //             onlyInViewport: true,\n            //         },\n            //         navigation: {\n            //             nextEl: '.learning-center-swiper-button-next',\n            //             prevEl: '.learning-center-swiper-button-prev',\n            //         },\n\n            //     });\n                \n            //     // Update Locomotive Scroll after Swiper initialization\n            //     setTimeout(() => {\n            //         if (scroll) {\n            //             scroll.update();\n            //         }\n            //     }, 500);\n\n            //     if( document.querySelectorAll('.team-carousel').length ){\n\n            //         // Initialize the Swiper with proper configuration to avoid jump on loop\n            //         var teamSwiper = new Swiper('.teamSwiper', {\n            //             slidesPerView: 1.5,\n            //             loop: true,\n            //             speed: 750, // Match your CSS transition speed\n            //             centeredSlides: true,\n            //             spaceBetween: 32,\n            //             mousewheel: false,\n            //             keyboard: {\n            //             enabled: true,\n            //             onlyInViewport: true,\n            //             },\n            //             navigation: {\n            //             nextEl: '.team-swiper-button-next',\n            //             prevEl: '.team-swiper-button-prev',\n            //             },\n            //             breakpoints: {\n            //             768: {\n            //                 slidesPerView: 2,\n            //                 spaceBetween: 44,\n            //                 centeredSlides: true,\n            //             },\n            //             1024: {\n            //                 slidesPerView: 3,\n            //                 spaceBetween: 100,\n            //                 centeredSlides: false,\n            //             }\n            //             },\n            //             // These are the key fixes for smooth looping\n            //             loopAdditionalSlides: 5, // Add more cloned slides\n            //             loopedSlides: 5,         // Number of looped slides\n            //             // This is critical for smooth animation\n            //             allowTouchMove: false,   // Disable touch movement to prevent jump issues\n            //             on: {\n            //             // Important: Update Locomotive Scroll after swiper events\n            //             slideChangeTransitionEnd: function() {\n            //                 if (scroll) {\n            //                 // Force Locomotive Scroll to update\n            //                 scroll.update();\n            //                 }\n            //             },\n            //             touchEnd: function() {\n            //                 if (scroll) {\n            //                 // Make sure Locomotive Scroll is updated after touch interactions\n            //                 setTimeout(() => {\n            //                     scroll.update();\n            //                 }, 100);\n            //                 }\n            //             }\n            //             }\n            //         });\n                    \n            //         // If you need touch movement, add this to handle navigation via buttons only:\n            //         document.querySelector('.team-swiper-button-next').addEventListener('click', () => {\n            //             teamSwiper.slideNext();\n            //         });\n            //         document.querySelector('.team-swiper-button-prev').addEventListener('click', () => {\n            //             teamSwiper.slidePrev();\n            //         });\n\n            //         // Select all link elements within swiper-slide elements that are inside team-carousel\n            //         document.querySelectorAll('.team-carousel .swiper-slide .link').forEach(link => {\n            //             // Add click event listener to each link\n            //             link.addEventListener('click', function(e) {\n            //                 e.preventDefault();\n                            \n            //                 const linkHref = this.getAttribute('href').toString();\n            //                 document.querySelector(linkHref).classList.add('active');\n            //                 console.log(linkHref);\n            //                 const teamPanelOverlay = document.querySelector('.panel-container');\n\n            //                 if (scroll) {\n            //                     scroll.stop();\n            //                 }\n\n            //                 teamPanelOverlay.classList.add('active');\n            //                 teamPanelOverlay.style.top = scrollTop + 'px';\n            //             });\n            //         });\n\n            //         // Make sure all close/overlay click handlers properly restart Locomotive Scroll\n            //         document.querySelector('.team-panel--header .close').addEventListener('click', function() {\n            //             const teamPanelOverlay = document.querySelector('.panel-container');\n\n            //             teamPanelOverlay.classList.remove('active');\n            //             document.querySelectorAll('.team-panel--content').forEach(panel => {\n            //                 panel.classList.remove('active');\n            //             });\n\n            //             if (scroll) {\n            //                 scroll.start();\n                            \n            //                 // Force update after starting\n            //                 setTimeout(() => {\n            //                     scroll.update();\n            //                 }, 100);\n            //             }\n            //         });\n\n            //         document.querySelector('.team-panel--overlay').addEventListener('click', function() {\n            //             console.log('overlay clicked');\n            //             const teamPanelOverlay = document.querySelector('.panel-container');\n\n            //             teamPanelOverlay.classList.remove('active');\n            //             document.querySelectorAll('.team-panel--content').forEach(panel => {\n            //                 panel.classList.remove('active');\n            //             });\n                        \n            //             if (scroll) {\n            //                 scroll.start();\n                            \n            //                 // Force update after starting\n            //                 setTimeout(() => {\n            //                     scroll.update();\n            //                 }, 100);\n            //             }\n            //         });\n\n            //         // Add event listeners to handle resize events\n            //         window.addEventListener('resize', function() {\n            //             if (scroll) {\n            //                 // Force Locomotive Scroll update on window resize\n            //                 setTimeout(() => {\n            //                     scroll.update();\n            //                 }, 100);\n            //             }\n            //         });\n\n            //         // Ensure Locomotive Scroll continues to work when interacting with the Swiper\n            //         const teamCarousel = document.querySelector('.team-carousel');\n            //         if (teamCarousel) {\n            //             // When mouse enters the carousel, make sure scroll isn't stopped\n            //             teamCarousel.addEventListener('mouseenter', function() {\n            //                 if (scroll && !document.querySelector('.panel-container.active')) {\n            //                     scroll.update();\n            //                 }\n            //             });\n                        \n            //             // When mouse leaves the carousel, make sure scroll is working\n            //             teamCarousel.addEventListener('mouseleave', function() {\n            //                 if (scroll && !document.querySelector('.panel-container.active')) {\n            //                     scroll.update();\n            //                 }\n            //             });\n            //         }\n\n            //     }\n\n            //     // if( document.querySelectorAll('.fidato--resource-card.videos').length ){\n            //     //     //console.log(document.querySelectorAll('.fidato--resource-card.videos').length);\n\n            //     //     // First, let's create the play button element\n            //     //     const playButton = document.createElement('div');\n            //     //     playButton.className = 'play-button';\n            //     //     playButton.style.position = 'absolute'; // Changed from 'fixed' to 'absolute'\n            //     //     playButton.style.pointerEvents = 'none';\n            //     //     playButton.style.opacity = '0';\n            //     //     playButton.style.zIndex = '1000';\n            //     //     playButton.style.pointerEvents = 'none';\n            //     //     playButton.style.transition = 'left 0.15s ease-out, top 0.15s ease-out, opacity 0.5s ease'; // Add smooth transition\n\n            //     //     // You can add styling to the play button\n            //     //     playButton.innerHTML = `\n            //     //     <span>Click To Play</span>\n            //     //     `;\n\n            //     //     // Append the play button to the learning-center-carousel\n            //     //     const carousel = document.querySelector('.learning-center-carousel');\n            //     //         if (carousel) {\n            //     //             carousel.appendChild(playButton);\n            //     //             // Make sure the carousel has position relative or absolute for proper positioning\n            //     //             const carouselPosition = window.getComputedStyle(carousel).position;\n\n            //     //             if (carouselPosition === 'static') {\n            //     //                 carousel.style.position = 'relative';\n            //     //             }\n            //     //     } else {\n            //     //         document.body.appendChild(playButton);\n            //     //     }\n\n            //     //     // Variable to store the timeout ID\n            //     //     let moveTimeout;\n\n            //     //     // Add event listeners to video elements\n            //     //     const videos = document.querySelectorAll('.fidato--resource-card.videos');\n            //     //     for (let i = 0; i < videos.length; i++) {\n            //     //     videos[i].addEventListener('mouseover', function(event) {\n            //     //         // Get mouse position relative to the carousel\n            //     //         const rect = carousel.getBoundingClientRect();\n            //     //         const x = event.clientX - rect.left;\n            //     //         const y = event.clientY - rect.top;\n\n            //     //         if( videos[i].classList.contains('featured') ){\n            //     //             playButton.classList.add('featured');\n            //     //         }else{\n            //     //             playButton.classList.remove('featured');\n            //     //         }\n\n                        \n            //     //         // Position the play button at the cursor location immediately on hover\n            //     //         playButton.style.left = (x - 20) + 'px';\n            //     //         playButton.style.top = (y - 20) + 'px';\n                        \n            //     //         // Make the play button visible\n            //     //         playButton.style.opacity = '1';\n            //     //     });\n                    \n            //     //     // Track mouse movement while hovering over the video\n            //     //     videos[i].addEventListener('mousemove', function(event) {\n            //     //         // Clear any existing timeout\n            //     //         clearTimeout(moveTimeout);\n                        \n            //     //         // Create a new timeout to delay the position update\n            //     //         moveTimeout = setTimeout(() => {\n            //     //         // Get mouse position relative to the carousel\n            //     //         const rect = carousel.getBoundingClientRect();\n            //     //         const x = event.clientX - rect.left;\n            //     //         const y = event.clientY - rect.top;\n                        \n            //     //         // Update the play button position\n            //     //         playButton.style.left = (x - 20) + 'px';\n            //     //         playButton.style.top = (y - 20) + 'px';\n            //     //         }, 7); // 80ms delay (about 4-5 frames at 60fps)\n            //     //     });\n                    \n            //     //     // Hide the play button when mouse leaves the video card\n            //     //     videos[i].addEventListener('mouseout', function() {\n            //     //         // Clear any pending timeout\n            //     //         clearTimeout(moveTimeout);\n                        \n            //     //         // Hide the play button\n            //     //         playButton.style.opacity = '0';\n            //     //     });\n            //     //     }\n\n\n\n\n\n            //     // }\n            \n\n\n            // }, false);\n        });\n    }\n}\n\nnew FidatoPluginJS();\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":["FidatoPluginJS","_classCallCheck","init","_createClass","key","value","document","addEventListener","event","console","log","dividers","querySelectorAll","i","length","setAttribute","elements","id","scroll","scrollTop","initScroll","LocomotiveScroll","el","querySelector","smooth","multiplier","lerp","scrollingClass","draggingClass","on","obj","y","setupHashLinks","forEach","link","targetId","getAttribute","substring","e","preventDefault","target","concat","_document$querySelect","headerHeight","offsetHeight","scrollTo","offset","callback","update","scrollToHash","hash","_document$querySelect2","duration","fixTopCutoff","instance","disableLerp","isInitialLoad","window","location","setTimeout","setInterval","clearTimeout","resizedFinished","overflowSwiper","Swiper","slidesPerView","centeredSlides","loop","speed","spaceBetween","mousewheel","keyboard","enabled","onlyInViewport","navigation","nextEl","prevEl","breakpoints","blueNumericSwiper","blueValuesSwiper","learningCenterSwiper","teamSwiper","loopAdditionalSlides","loopedSlides","allowTouchMove","slideChangeTransitionEnd","touchEnd","slideNext","slidePrev","linkHref","toString","classList","add","teamPanelOverlay","stop","style","top","remove","panel","start","teamCarousel"],"sourceRoot":""}